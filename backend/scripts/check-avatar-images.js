const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function checkAvatarImages() {
  try {
    console.log('üîç Verificando im√°genes de avatares con nueva estructura...');
    
    // Obtener todos los avatares de la base de datos
    const avatars = await prisma.avatar.findMany({
      where: { isActive: true },
      orderBy: { name: 'asc' }
    });
    
    console.log(`\nüìä Avatares encontrados: ${avatars.length}`);
    
    for (const avatar of avatars) {
      console.log(`\nüë§ Avatar: ${avatar.name}`);
      console.log(`   ID: ${avatar.id}`);
      console.log(`   URL de imagen principal: ${avatar.imageUrl}`);
      console.log(`   Categor√≠a: ${avatar.category}`);
      console.log(`   Premium: ${avatar.isPremium ? 'S√≠' : 'No'}`);
      console.log(`   Activo: ${avatar.isActive ? 'S√≠' : 'No'}`);
      
      // Verificar si la imagen principal existe
      const imagePath = path.join(__dirname, '../../frontend/public', avatar.imageUrl);
      const imageExists = fs.existsSync(imagePath);
      
      console.log(`   üìÅ Imagen principal existe: ${imageExists ? '‚úÖ S√≠' : '‚ùå No'}`);
      
      if (!imageExists) {
        console.log(`   ‚ö†Ô∏è  Ruta esperada: ${imagePath}`);
      }
      
      // Verificar otras im√°genes del avatar
      const avatarFolder = path.dirname(imagePath);
      const avatarName = avatar.name.toLowerCase();
      
      const expectedImages = [
        'principal.jpg',
        'perfil.jpg', 
        'chat.jpg'
      ];
      
      console.log(`   üìÇ Verificando carpeta: ${avatarFolder}`);
      
      if (fs.existsSync(avatarFolder)) {
        const files = fs.readdirSync(avatarFolder);
        console.log(`   Archivos en carpeta: ${files.length}`);
        
        expectedImages.forEach(expectedImage => {
          const imageExists = files.includes(expectedImage);
          console.log(`   - ${expectedImage}: ${imageExists ? '‚úÖ' : '‚ùå'}`);
        });
        
        // Verificar carpeta de galer√≠a
        const galleryPath = path.join(avatarFolder, 'galeria');
        if (fs.existsSync(galleryPath)) {
          const galleryFiles = fs.readdirSync(galleryPath);
          console.log(`   - Galer√≠a: ${galleryFiles.length} im√°genes`);
        } else {
          console.log(`   - Galer√≠a: ‚ùå No existe`);
        }
      } else {
        console.log(`   ‚ùå Carpeta del avatar no existe`);
      }
    }
    
    // Verificar estructura general de carpetas
    const avatarsDir = path.join(__dirname, '../../frontend/public/avatars');
    console.log(`\nüìÅ Verificando estructura general: ${avatarsDir}`);
    
    if (fs.existsSync(avatarsDir)) {
      const avatarFolders = fs.readdirSync(avatarsDir);
      console.log(`   Carpetas de avatares: ${avatarFolders.length}`);
      avatarFolders.forEach(folder => {
        console.log(`   - ${folder}/`);
      });
    } else {
      console.log('   ‚ùå Carpeta de avatares no existe');
    }
    
    console.log('\nüìã Resumen:');
    console.log(`- Avatares en BD: ${avatars.length}`);
    console.log(`- Im√°genes principales esperadas: ${avatars.filter(a => a.imageUrl).length}`);
    
  } catch (error) {
    console.error('‚ùå Error verificando im√°genes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
checkAvatarImages(); 