generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  username               String                  @unique
  password               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  conversationEmbeddings ConversationEmbedding[]
  memoryClusters         MemoryCluster[]
  messages               Message[]
  payments               Payment[]
  sessionSummaries       SessionSummary[]
  sessions               Session[]
  tokens                 Token[]
  userMemories           UserMemory[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  currency    String   @default("usd")
  status      String   @default("pending")
  stripeId    String?  @unique
  description String?
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Avatar {
  id                     String                  @id @default(cuid())
  name                   String
  description            String
  personality            String
  imageUrl               String
  isPremium              Boolean                 @default(false)
  category               String
  isActive               Boolean                 @default(true)
  background             String?
  origin                 String?
  age                    Int?
  occupation             String?
  interests              String?
  fears                  String?
  dreams                 String?
  secrets                String?
  relationships          String?
  lifeExperiences        String?
  personalityTraits      String?
  communicationStyle     String?
  emotionalState         String?
  motivations            String?
  conflicts              String?
  growth                 String?
  voiceType              String?
  accent                 String?
  mannerisms             String?
  style                  String?
  scent                  String?
  chatStyle              String?
  topics                 String?
  boundaries             String?
  kinks                  String?
  roleplay               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  conversationEmbeddings ConversationEmbedding[]
  messages               Message[]
  sessionSummaries       SessionSummary[]
  userMemories           UserMemory[]

  @@map("avatars")
}

model Message {
  id         String   @id @default(cuid())
  userId     String
  avatarId   String?
  content    String
  isUser     Boolean  @default(true)
  tokensUsed Int      @default(0)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar     Avatar?  @relation(fields: [avatarId], references: [id])

  @@map("messages")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model MemoryCategory {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  parent      MemoryCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    MemoryCategory[] @relation("CategoryHierarchy")
  memories    UserMemory[]

  @@map("memory_categories")
}

model UserMemory {
  id            Int            @id @default(autoincrement())
  userId        String
  avatarId      String
  memoryType    String         @default("general")
  memoryKey     String?
  categoryId    Int
  memoryContent String
  memoryVector  String
  memoryOwner   String         @default("user")
  source        String         @default("batch_analysis")
  sessionId     String?
  turnCount     Int?
  confidence    Float          @default(0.5)
  tags          String?
  isActive      Boolean        @default(true)
  lastUpdated   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  category      MemoryCategory @relation(fields: [categoryId], references: [id])
  avatar        Avatar         @relation(fields: [avatarId], references: [id])
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, avatarId, memoryOwner, confidence])
  @@index([categoryId, isActive])
  @@index([memoryType])
  @@map("user_memory")
}

model ConversationEmbedding {
  id          Int      @id @default(autoincrement())
  userId      String
  avatarId    String
  sessionId   String?
  messageId   String?
  content     String
  embedding   String
  messageType String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar      Avatar   @relation(fields: [avatarId], references: [id])

  @@index([userId, sessionId])
  @@index([timestamp])
  @@map("conversation_embeddings")
}

model MemoryCluster {
  id             Int      @id @default(autoincrement())
  userId         String
  clusterType    String
  clusterName    String
  centroidVector String
  memberCount    Int      @default(0)
  lastUpdated    DateTime @default(now())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, clusterType])
  @@map("memory_clusters")
}

model SessionSummary {
  id            Int      @id @default(autoincrement())
  userId        String
  avatarId      String
  sessionId     String
  summary       String
  summaryVector String
  keyTopics     String
  emotionalTone String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar        Avatar   @relation(fields: [avatarId], references: [id])

  @@index([userId, sessionId])
  @@map("session_summaries")
}
