// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  tokens    Token[]
  payments  Payment[]
  messages  Message[]
  sessions  Session[]
  userMemories UserMemory[]
  conversationEmbeddings ConversationEmbedding[]
  memoryClusters MemoryCluster[]
  sessionSummaries SessionSummary[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  currency    String   @default("usd")
  status      String   @default("pending")
  stripeId    String?  @unique
  description String?
  metadata    String?  // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Avatar {
  id          String   @id @default(cuid())
  name        String
  description String
  personality String
  imageUrl    String
  isPremium   Boolean  @default(false)
  category    String
  isActive    Boolean  @default(true)
  
  // Desarrollo creativo del personaje
  background  String?  // Trasfondo general del personaje
  origin      String?  // Orígenes y lugar de nacimiento
  age         Int?     // Edad del personaje
  occupation  String?  // Profesión o ocupación
  interests   String?  // Intereses y hobbies
  fears       String?  // Miedos y vulnerabilidades
  dreams      String?  // Sueños y aspiraciones
  secrets     String?  // Secretos del personaje
  relationships String? // Relaciones importantes
  lifeExperiences String? // Experiencias de vida significativas
  personalityTraits String? // Rasgos de personalidad detallados
  communicationStyle String? // Estilo de comunicación
  emotionalState String? // Estado emocional típico
  motivations  String?  // Motivaciones y deseos
  conflicts    String?  // Conflictos internos y externos
  growth       String?  // Arco de desarrollo del personaje
  
  // Metadatos del personaje
  voiceType   String?  // Tipo de voz (suave, ronca, etc.)
  accent      String?  // Acento o forma de hablar
  mannerisms  String?  // Gestos y manerismos característicos
  style       String?  // Estilo de vestir y apariencia
  scent       String?  // Perfume o aroma característico
  
  // Configuración del chat
  chatStyle   String?  // Estilo de conversación específico
  topics      String?  // Temas favoritos de conversación
  boundaries  String?  // Límites y temas a evitar
  kinks       String?  // Preferencias sexuales (si aplica)
  roleplay    String?  // Estilo de roleplay preferido
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  messages Message[]
  userMemories UserMemory[]
  conversationEmbeddings ConversationEmbedding[]
  sessionSummaries SessionSummary[]

  @@map("avatars")
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  avatarId  String?
  content   String
  isUser    Boolean  @default(true)
  tokensUsed Int     @default(0)
  createdAt DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar Avatar? @relation(fields: [avatarId], references: [id])

  @@map("messages")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ===== TABLAS DE MEMORIA VECTORIAL =====

model UserMemory {
  id            Int      @id @default(autoincrement())
  userId        String
  avatarId      String
  memoryType    String
  memoryKey     String?
  memoryContent String
  memoryVector  String   // JSON string del vector (1024 dimensiones)
  confidence    Float    @default(0.5)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar Avatar @relation(fields: [avatarId], references: [id])

  @@index([userId, avatarId])
  @@index([memoryType])
  @@map("user_memory")
}

model ConversationEmbedding {
  id          Int      @id @default(autoincrement())
  userId      String
  avatarId    String
  sessionId   String?
  messageId   String?
  content     String
  embedding   String   // JSON string del vector (1024 dimensiones)
  messageType String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar Avatar @relation(fields: [avatarId], references: [id])

  @@index([userId, sessionId])
  @@index([timestamp])
  @@map("conversation_embeddings")
}

model MemoryCluster {
  id             Int      @id @default(autoincrement())
  userId         String
  clusterType    String
  clusterName    String
  centroidVector String   // JSON string del vector centro (1024 dimensiones)
  memberCount    Int      @default(0)
  lastUpdated    DateTime @default(now())
  createdAt      DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, clusterType])
  @@map("memory_clusters")
}

model SessionSummary {
  id            Int      @id @default(autoincrement())
  userId        String
  avatarId      String
  sessionId     String
  summary       String
  summaryVector String   // JSON string del vector (1024 dimensiones)
  keyTopics     String   // JSON string de array de temas
  emotionalTone String?
  createdAt     DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar Avatar @relation(fields: [avatarId], references: [id])

  @@index([userId, sessionId])
  @@map("session_summaries")
} 